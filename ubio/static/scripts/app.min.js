(function ($) {
  //////////////////////////////
  // Avatar plugin
  //
  // To make things work, a <form> element which action is set to GET (e.g. the page where it is put),
  // must have a class `.ubio-avatar-update-form` and have an attribute `data-target`, which stores a
  // URL for avatar update.
  //
  // The form must also have an <input type="file"> element.
  //
  // Example:
  //
  // <form class="ubio-avatar-update-form" action="/profile" method="GET" data-target="/avatar/update">
  //   <input type="file" value="Choose file...">
  // </form>
  //
  $.fn.ubioAvatarUpdateForm = function () {
    var form = this;  // `this` will point an `<input>` element below
    form.find('input[type="file"]').change(function (event) {
      // `this` is an <input type="file"> (not a jQuery object, plain DOM!)
      var input = this;
      if (input.files && input.files[0]) {
        var sizeKb = (input.files[0].size / 1024).toFixed(4);
        if (sizeKb > 500) {
          Swal.fire({
            type: 'warning',
            text: `Profile image size must be under 500KB, your file is ${sizeKb}KB`,
            customClass: {
              confirmButton: 'btn btn-outline-secondary mx-2',
            },
            buttonsStyling: false
          });
        } else {
          var data = new FormData(form.get(0));
          var reader = new FileReader();
          reader.onload = function (re) {
            Swal.fire({
              text: 'Use this as your profile picture?',
              imageUrl: re.target.result,
              imageWidth: 240,
              imageHeight: 240,
              imageAlt: 'new profile picture',
              animation: false,
              showCancelButton: true,
              cancelButtonText: 'No',
              confirmButtonText: 'Yes',
              customClass: {
                image: 'img-fluid rounded-circle',
                confirmButton: 'btn btn-success mx-2',
                cancelButton: 'btn btn-outline-secondary mx-2',
              },
              buttonsStyling: false
            }).then(result => {
              if (result.value) {
                var req = new XMLHttpRequest();
                req.open("POST", form.attr('data-target'), true);
                req.onload = function (xe) {
                  form.submit();
                };
                data.append('avatar', re.target.result);
                data.append('csrfmiddlewaretoken', $('[name=csrfmiddlewaretoken]').val());
                req.send(data);
              } else {
                $(input).val('');
              }
            });
          };
          reader.readAsDataURL(input.files[0]);
        }
      }
      event.preventDefault();
    });
  };

  //////////////////////////////
  // Associating the plugins
  $('.ubio-avatar-update-form').ubioAvatarUpdateForm();
  console.log('Registered Avatar update form plugin!');
}(jQuery));


$(document).ready(function () {
  $('.current-year').text(new Date().getFullYear());
});
(function ($) {
  //////////////////////////////
  // FileInput plugin:
  // consists of a (hidden) <input type="file" ...> and a label with class .ubio-file-name
  // which receives the file name from the <input>.
  //
  // To enable this plugin automatically, wrap the <input> and .ubio-file-name elements
  // inside an element with class '.ubio-file'
  //
  // To use it:
  // * mark the text element to be sed as file name label a class '.ubio-file-name'
  //
  // Example:
  //
  // <div class="ubio-file">
  //   <input type="file" value="Choose file..." name="document">
  //   <p class="ubio-file-name"></p>
  // </div>
  //
  $.fn.ubioFileInput = function () {
    var label = this.find('.ubio-file-name');
    var input = this.find('input[type="file"]');
    input.on('change', function () {
      if (this.files && this.files[0]) {
        label.text(this.files[0].name);
      }
    });
    return this;
  };

  /////////////////////////////////////
  // Submit load indication
  //
  // Using this plugin allows to show a spinner indicator instead of 'Save' button while waiting
  // for the server response on submit.
  //
  // Example:
  //
  // <button type="submit" class="ubio-submit btn btn-success" data-form="#theForm">
  //   <span class="ubio-submit-indicator spinner-border spinner-border-sm d-none"></span>
  //   Submit...
  // </button>
  //
  $.fn.ubioFormSubmitIndicator = function () {
    var form = $(this.attr('data-form'));
    form.submit(event => {
      var indicator = this.find('.ubio-submit-indicator');
      this.prop('disabled', true);
      indicator.removeClass('d-none');
    });
    return this;
  };

  //////////////////////////////////////////
  // File view and delete plugin (file-vd)
  //
  // Expected to have a link to view the file and a form to delete it. To make things work,
  // HTML must contain a `.ubio-file-vd` element, inside which there will be a form and an
  // area to view the file and have a delete link (see the example). The form must have
  // `.ubio-file-vd-form` class, the area - `.ubio-file-vd-box` class.
  //
  // When the delete form is submitted, the plugin initiates an AJAX submit using
  // XMLHttpRequest API. Upon receiving the response, it replaces the working area
  // (which is marked with `.ubio-file-vd-form` class) with the response content.
  // It is expected that the response contains HTML.
  //
  // Example:
  //
  // <div class="ubio-file-vd">
  //   <form class="ubio-file-vd-form" action="/item/delete" method="POST" id="form1"></form>
  //   <div class="ubio-file-vd-box">
  //     <p><a href="/item/view">press to view the file</a></p>
  //     <button type="submit" form="form1">Delete</button>
  //   </div>
  // </div>
  $.fn.ubioFileVD = function () {
    var form = this.find('.ubio-file-vd-form');
    var box = this.find('.ubio-file-vd-box');
    form.on('submit', event => {
      var req = new XMLHttpRequest();
      req.onload = () => { box.html(req.response); };
      req.open(form.attr('method'), form.attr('action'), true);
      req.send(new FormData(form.get(0)));
      event.preventDefault();
      return false;
    });
    return this;
  };


  //////////////////////////////
  // Associating the plugins
  $('.ubio-file').ubioFileInput();
  $('.ubio-submit').ubioFormSubmitIndicator();
  $('.ubio-file-vd').ubioFileVD();
}(jQuery));

$(document).ready(function () {
    $('body').scrollspy({target: '#main-nav'});

    $('#main-nav a').on('click', function (event) {
        if (this.hash !== "") {
            event.preventDefault();
            var hash = this.hash;
            $('html, body').animate({
                scrollTop: $(hash).offset().top
            }, 800, function () {
                window.location.hash = hash;
            });
        }
    });
});